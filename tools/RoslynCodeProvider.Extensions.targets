<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <NupkgToolPath>$(RepositoryRoot)src\Packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform\tools\</NupkgToolPath>
        <LocalRoslynFolderName>Roslyn-$(MSNetCompilersNuGetPackageVersion)</LocalRoslynFolderName>
    </PropertyGroup>
    
    <UsingTask TaskName="DownloadRoslynBinaries" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <NupkgToolPath ParameterType="System.String" Required="true" />
      <LocalRoslynFolderName ParameterType="System.String" Required="true" />
      <ReferenceRoslynNupkgVersion ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Using Namespace="System.Net" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try
                {
                   using (var wc = new WebClient())
                    {
                        var roslynNugetBaseUri = "https://api.nuget.org/packages/microsoft.net.compilers.{0}.nupkg";
                        var roslynPackageName = "microsoft.net.compilers.{0}.nupkg";

                        var targetFilePath = Path.Combine(Path.GetTempPath(), string.Format(roslynPackageName, ReferenceRoslynNupkgVersion));
                        var targetExtractPath = Path.Combine(Path.GetTempPath(), LocalRoslynFolderName);
                        var packageToolsPath = Path.Combine(NupkgToolPath, LocalRoslynFolderName);
                        if (Directory.Exists(targetExtractPath))
                        {
                            Directory.Delete(targetExtractPath, true);
                        }
                        if (Directory.Exists(packageToolsPath))
                        {
                            Directory.Delete(packageToolsPath, true);
                        }

                        wc.DownloadFile(string.Format(roslynNugetBaseUri, ReferenceRoslynNupkgVersion), targetFilePath);
                        Log.LogMessage("Microsoft.Net.Compilers.{0}.nupkg is downloaded", ReferenceRoslynNupkgVersion);

                        ZipFile.ExtractToDirectory(targetFilePath, targetExtractPath);
                        Directory.CreateDirectory(packageToolsPath);
                        foreach (var file in Directory.GetFiles(Path.Combine(targetExtractPath, "tools")))
                        {
                            var fi = new FileInfo(file);
                            File.Copy(file, Path.Combine(packageToolsPath, fi.Name));
                        }
                    }
                }
                catch (Exception ex)
                {
                  Log.LogErrorFromException(ex);
                  return false;
                }
                return true;
                ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="PreprocessFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Files Required="true" ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
      <OutputDir Required="true" ParameterType="System.String" />
      <PropertyCollection Required="true" ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Collections.Concurrent"  />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            string line;
            string tokenPattern = @"\$" + @"(\w+)\$"; // Split up to avoid msbuild property substitution
            ConcurrentDictionary<string, string> properties = new ConcurrentDictionary<string, string>(StringComparer.OrdinalIgnoreCase); // Nuget .pp transforms are case insensitive
            foreach (var p in PropertyCollection) { properties.TryAdd(p.GetMetadata("Identity"), p.GetMetadata("Value")); }
            foreach (var inFile in Files) {
                string filename = inFile.ItemSpec;
                if (!File.Exists(filename)) { Log.LogError("File to preprocess does not exist: {0}", filename); return false; }
                if (!Directory.Exists(OutputDir)) { Directory.CreateDirectory(OutputDir); }
                using (StreamReader sr = new StreamReader(filename))
                using (StreamWriter sw = new StreamWriter(Path.Combine(OutputDir, Path.GetFileName(filename)), false))
                {
                    while ((line = sr.ReadLine()) != null) {
                        line = Regex.Replace(line, tokenPattern, (m) => {
                            string key = m.Groups[1].Value;
                            if (properties.ContainsKey(key)) { return properties[key]; }
                            return m.Groups[0].Value;
                        });
                        sw.WriteLine(line);
                    }
                }
            }
    ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
