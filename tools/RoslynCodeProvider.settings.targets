<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Configurable properties-->
  <PropertyGroup>
    <!-- Versioning:
            Major:	'Major' for Assembly, File, Info, and Package.
            Minor:	'Minor' for Assembly, File, Info, and Package.
            Revision:	Third for Assembly and File. Strategy - Try to leave this 0 and only rev Major/Minor for big changes and Release for non-dependency-breaking changes.
            Release:	Third for Info and Package.
            Build:	(Auto-generated) for File and Info. (Assembly is always 0)
         Update package and file without touching assembly, except for major releases.

         Most of the interesting ones are already set in each project's individual settings file.
    -->
    <_PreventVersionPropertyCaching>$([System.DateTime]::Now.Ticks)</_PreventVersionPropertyCaching>
    <BuildQuality Condition="'$(BuildQuality)' == ''">preview1</BuildQuality>
    <VersionStartYear>2025</VersionStartYear>
    <VersionMajor>4</VersionMajor>
    <VersionMinor>13</VersionMinor>
    <VersionRevision>0</VersionRevision>
    <VersionRelease>0</VersionRelease>
    <VersionBuild>0</VersionBuild>
  </PropertyGroup>

  <PropertyGroup Label="NuGet package dependencies">
    <MSNetCompilersNuGetPackageVersion>4.13.0</MSNetCompilersNuGetPackageVersion>
  </PropertyGroup>

  <!-- Common Properties & Imports -->
  <PropertyGroup>
    <CustomAfterMicrosoftCommonTargets>$(MSBuildThisFileDirectory)version.targets;$(MSBuildThisFileDirectory)signing.targets</CustomAfterMicrosoftCommonTargets>
    <CustomAfterNuGetProjTargets>$(MSBuildThisFileDirectory)signing.targets</CustomAfterNuGetProjTargets>
    <RepositoryRoot>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), RoslynCodeProvider.sln))\</RepositoryRoot>
    <SolutionDir>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), RoslynCodeProvider.sln))\</SolutionDir>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)RoslynCodeProvider.Extensions.targets"/>

  <Import Project="$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.props"
      Condition="Exists('$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.props')" />
  <Import Project="$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.targets"
      Condition="Exists('$(RepositoryRoot)\packages\microbuild.core.0.3.0\build\MicroBuild.Core.targets')" />

  <!-- Build order -->
  <PropertyGroup>
    <GitCommit Condition=" '$(GitCommit)' == '' "></GitCommit>
    <GitCommitLink Condition=" '$(GitCommitLink)' == '' "></GitCommitLink>
  </PropertyGroup>

  <!-- Default properties -->
  <PropertyGroup Label="Common Configuration">
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <OutputPath>$(RepositoryRoot).binaries\bin\$(Configuration)\</OutputPath>
    <IntermediateOutputPath>$(RepositoryRoot).binaries\obj\$(Configuration)\$(MSBuildProjectName)\</IntermediateOutputPath>
    <AssemblyPath Condition="'$(CodeSignEnabled)' == 'true'">$(CodeSignOutputPath)</AssemblyPath>
    <AssemblyPath Condition="'$(AssemblyPath)' == ''">$(OutputPath)</AssemblyPath>
    <TestOutputPath>$(OutputPath)test\</TestOutputPath>
  </PropertyGroup>

  <!-- Nuget config -->
  <PropertyGroup Label="Nuget Configuration">
    <NuGetOutputPath>$(RepositoryRoot).binaries\Packages\$(Configuration)</NuGetOutputPath>
    <NuGetPackSymbols Condition="'$(NuGetPackSymbols)' == ''">true</NuGetPackSymbols>
    <ReferencePackagesPath>$(RepositoryRoot)packages\</ReferencePackagesPath>
    <SourceRootFullPath>$(RepositoryRoot)\src\$(MSBuildProjectName)\</SourceRootFullPath>
    <NuGetScriptDirectory>$(MSBuildProjectDirectory)\tools</NuGetScriptDirectory>
    <NuGetBuildDirectory>$(MSBuildProjectDirectory)\build</NuGetBuildDirectory>
    <NuGetProcessedScriptSubDirectory>pp</NuGetProcessedScriptSubDirectory>
  </PropertyGroup>

  <ItemGroup Condition="'$(MSBuildProjectExtension)' == '.nuproj'">
    <NuGetScriptFiles Include="$(NuGetScriptDirectory)\*.ps1" />
    <NuGetBuildTargets Include="$(NuGetBuildDirectory)\*.targets" />
  </ItemGroup>

  <Import Project="$(MSBuildThisFileDirectory)version.targets" Condition="'$(MSBuildProjectExtension)' == '.nuproj'"/>

  <Target Name="SetNuSpecProperties" BeforeTargets="GenerateNuSpecFile">
    <PropertyGroup>
      <NuSpecProperties>
        NuGetPackageVersion=$(NuGetPackageVersion);
        NuGetPackageId=$(NuGetPackageId);
        GitCommitLink=$(GitCommitLink);
      </NuSpecProperties>
    </PropertyGroup>
  </Target>

  <Target Name="PreprocessNuGetScripts" BeforeTargets="GetNugetContentFromProject"> <!-- AfterTargets="GenerateNuSpecFile"> -->
    <ItemGroup>
      <PropertiesToReplace Include="roslynToolPath">
        <Value>tools\roslyn-$(MSNetCompilersNuGetPackageVersion)</Value>
      </PropertiesToReplace>
      <PropertiesToReplace Include="compilerPlatformFQAN">
        <Value>Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=$(AssemblyVersion), Culture=neutral, PublicKeyToken=31bf3856ad364e35</Value>
      </PropertiesToReplace>
      <PropertiesToReplace Include="providerVersion">
        <Value>$(AssemblyVersion)</Value>
      </PropertiesToReplace>
    </ItemGroup>

    <PreprocessFiles Files="@(NuGetScriptFiles)" OutputDir="$(NuGetScriptDirectory)\$(NuGetProcessedScriptSubDirectory)" PropertyCollection="@(PropertiesToReplace)" />
    <!-- Signing targets use the name 'NuGetProcessScriptSubDirectory'... but we can use the same convention here, even if we're not signing targets files. -->
    <PreprocessFiles Files="@(NuGetBuildTargets)" OutputDir="$(NuGetBuildDirectory)\$(NuGetProcessedScriptSubDirectory)" PropertyCollection="@(PropertiesToReplace)" />
  </Target>

  <!-- Test recognition -->
  <PropertyGroup>
    <TestRoot>$(RepositoryRoot)\RoslynCodeProviderTest</TestRoot>
    <BuildingTestProject Condition="$(MSBuildProjectDirectory.ToLower().Contains($(TestRoot.ToLower())))">true</BuildingTestProject>
  </PropertyGroup>
  
  <!-- Other useful targets -->
  <Target Name="SuperClean" BeforeTargets="AfterClean"  Condition="'$(MSBuildProjectExtension)' != '.nuproj'">
    <RemoveDir Directories="$(TargetDir)" /> <!-- bin -->
    <RemoveDir Directories="$(ProjectDir)$(BaseIntermediateOutputPath)" /> <!-- obj -->
    <RemoveDir Directories="$(ProjectDir)\obj" /> <!-- obj for features that weren't paying attention to BIOP -->
  </Target>

  <Target Name="SuperCleanPackage" AfterTargets="Clean" Condition="'$(MSBuildProjectExtension)' == '.nuproj'">
    <RemoveDir Directories="$(NuGetOutputPath)" />
    <RemoveDir Directories="$(NuGetSymbolsOutputPath)" />
    <RemoveDir Directories="$(NuGetScriptDirectory)\$(NuGetProcessedScriptSubDirectory)" />
    <RemoveDir Directories="$(NuGetSharedScriptDirectory)\$(NuGetProcessedScriptSubDirectory)" />
  </Target>
</Project>
